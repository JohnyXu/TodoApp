{"version":3,"sources":["components/AddTodo/index.js","components/AddTodo/AddTodo.js","propTypes/Todo.js","components/Todo/index.js","components/Todo/Todo.js","components/TodoApp/constants.js","components/FilterTodo/index.js","components/FilterTodo/FilterTodo.js","components/TodoApp/TodoApp.js","components/TodoApp/index.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","e","isEnter","console","log","target","value","this","props","addTodoItem","className","type","placeholder","onChange","handleChange","key","onKeyDown","handleKeyDown","Component","PropTypes","string","isRequired","bool","Todo","handleComplete","event","checked","todo","deleteTodoItem","id","content","complete","defaultChecked","onClick","size","FilterType","ClearType","FilterTodo","updateFilterType","filter","setState","filterType","udpateClearType","clear","clearType","handleFilterAll","displayTodos","handleFilterActive","displayActive","handleFilterComplete","displayComplete","resetTodos","resetTodoComplete","state","todos","Container","length","Button","active","variant","date","shoppings","items","TodoApp","String","trim","counter","todoItem","map","filteType","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a98f76b.chunk.js","sourcesContent":["import AddTodo from './AddTodo';\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './AddTodo.scss';\n\nclass AddTodo extends Component {\n  handleChange(e, isEnter) {\n    console.log('handleChange:', e.target.value, isEnter);\n    // this.props.addTodoItem(e.target.value,isEnter);\n  }\n\n  handleKeyDown(e, isEnter) {\n    this.props.addTodoItem(e.target.value, isEnter);\n  }\n\n  render() {\n    return (\n      <div className=\"input-group mb-3 addtodo block\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"What needs to be done?\"\n          onChange={(e) => {\n            this.handleChange(e, e.key === 'Enter');\n          }}\n          onKeyDown={(e) => {\n            let isEnter = e.key === 'Enter';\n            this.handleKeyDown(e, isEnter);\n            if (isEnter) {\n              e.target.value = '';\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nAddTodo.propTypes = {\n  addTodoItem: PropTypes.func.isRequired,\n};\n\nexport default AddTodo;\n","import PropTypes from 'prop-types';\nexport const TodoType = {\n  id: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  complete: PropTypes.bool.isRequired,\n};\n","import Todo from './Todo';\nexport default Todo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoType } from './../../propTypes/Todo';\nimport './Todo.scss';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nclass Todo extends Component {\n  handleComplete = (event) => {\n    console.log('handleComplete', event.target.checked);\n    this.props.handleComplete(event, this.props.todo);\n  };\n\n  deleteTodoItem = (event) => {\n    console.log('deleteTodoItem');\n    this.props.deleteTodoItem(event, this.props.todo.id);\n  };\n\n  render() {\n    const {\n      todo: { content, complete },\n    } = this.props;\n\n    return (\n      <div className=\"todo\">\n        <div className=\"item\">\n          <input type=\"checkbox\" defaultChecked={complete} className=\"complete\" onChange={this.handleComplete}></input>\n          <span className=\"content-item\">{content}</span>\n        </div>\n        <AiOutlineClose onClick={this.deleteTodoItem} size={25} />\n      </div>\n    );\n  }\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape(TodoType).isRequired,\n  handleComplete: PropTypes.func.isRequired,\n  deleteTodoItem: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","export const FilterType = {\n  ALL: 0,\n  COMPLETE: 1,\n  ACTIVE: 2,\n};\n\nexport const ClearType = {\n  ALL: 0,\n  COMPLETE: 1,\n};\n","import FilterTodo from './FilterTodo';\nexport default FilterTodo;\n","import React, { Component } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { FilterType, ClearType } from './../TodoApp/constants';\n\nimport './FilterTodo.scss';\n\nclass FilterTodo extends Component {\n  constructor() {\n    super();\n    this.state = {\n      filterType: FilterType.ALL,\n      clearType: ClearType.ALL,\n    };\n  }\n\n  updateFilterType = (filter) => {\n    this.setState({\n      filterType: filter,\n    });\n  };\n\n  udpateClearType = (clear) => {\n    this.setState({\n      clearType: clear,\n    });\n  };\n\n  handleFilterAll = () => {\n    const { displayTodos } = this.props;\n    this.updateFilterType(FilterType.ALL);\n    displayTodos();\n  };\n\n  handleFilterActive = () => {\n    const { displayActive } = this.props;\n    this.updateFilterType(FilterType.ACTIVE);\n    displayActive();\n  };\n\n  handleFilterComplete = () => {\n    const { displayComplete } = this.props;\n    this.updateFilterType(FilterType.COMPLETE);\n    displayComplete();\n  };\n\n  resetTodos = () => {\n    const { resetTodos } = this.props;\n    this.udpateClearType(ClearType.ALL);\n    resetTodos();\n  };\n\n  resetTodoComplete = () => {\n    const { resetTodoComplete } = this.props;\n    this.udpateClearType(ClearType.COMPLETE);\n    resetTodoComplete();\n  };\n\n  render() {\n    const { filterType, clearType } = this.state;\n    const { todos } = this.props;\n    return (\n      <Container>\n        <h5>{todos.length} Items Left</h5>\n        <div className=\"mt-2 mb-2 d-flex justify-content-around\">\n          <Button active={filterType === FilterType.ALL} variant=\"secondary\" onClick={this.handleFilterAll}>\n            All\n          </Button>\n          <Button active={filterType === FilterType.ACTIVE} variant=\"secondary\" onClick={this.handleFilterActive}>\n            Active\n          </Button>\n          <Button active={filterType === FilterType.COMPLETE} variant=\"secondary\" onClick={this.handleFilterComplete}>\n            Complete\n          </Button>\n        </div>\n        <div className=\"mt-2 mb-3 d-flex justify-content-around\">\n          <Button active={clearType === ClearType.ALL} onClick={this.resetTodos}>\n            Clear\n          </Button>\n          <Button active={clearType === ClearType.COMPLETE} onClick={this.resetTodoComplete}>\n            Clear Complete\n          </Button>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default FilterTodo;\n","import React, { Component } from 'react';\nimport { Row, Container } from 'react-bootstrap';\n\nimport AddTodo from './../AddTodo';\nimport Todo from '../Todo';\nimport FilterTodo from '../FilterTodo';\nimport { FilterType } from './constants';\nimport './TodoApp.scss';\n\nimport shoppings from '../../config/shopping';\nconst { date, items } = shoppings;\n\nclass TodoApp extends Component {\n  constructor() {\n    super();\n    console.log('date:', date);\n    this.state = {\n      filteType: FilterType.ALL,\n      todos: items,\n    };\n    this.counter = 0;\n  }\n\n  addTodoItem = (value, isEnter) => {\n    if (!isEnter) {\n      return;\n    }\n    if (!String(value).trim()) {\n      return;\n    }\n    this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          id: this.counter++,\n          content: value,\n          complete: false,\n        },\n      ],\n    });\n  };\n\n  deleteTodoItem = (e, id) => {\n    let todos = this.state.todos.filter((todoItem) => {\n      return todoItem.id !== id;\n    });\n    this.setState({\n      todos: todos,\n    });\n  };\n\n  handleComplete = (e, todo) => {\n    let todos = this.state.todos.map((todoItem) => {\n      if (todoItem.id === todo.id) {\n        todoItem.complete = e.target.checked;\n      }\n      return todoItem;\n    });\n    this.setState({\n      todos: todos,\n    });\n  };\n\n  resetTodos = () => {\n    this.setState({\n      todos: [],\n    });\n  };\n\n  resetTodoComplete = () => {\n    let todos = this.state.todos.filter((todo) => {\n      return !todo.complete;\n    });\n    this.setState({\n      todos: todos,\n    });\n  };\n\n  displayTodos = () => {\n    this.setState({\n      filteType: FilterType.ALL,\n    });\n  };\n\n  displayActive = () => {\n    this.setState({\n      filteType: FilterType.ACTIVE,\n    });\n  };\n\n  displayComplete = () => {\n    this.setState({\n      filteType: FilterType.COMPLETE,\n    });\n  };\n\n  render() {\n    const { todos, filteType } = this.state;\n    let displayTodos = todos.filter(function (todo) {\n      switch (filteType) {\n        case FilterType.COMPLETE:\n          return todo.complete;\n        case FilterType.ACTIVE:\n          return !todo.complete;\n        case FilterType.ALL:\n          return true;\n        default:\n          return true;\n      }\n    });\n    return (\n      <Container>\n        <Row className=\"d-flex justify-content-center \">\n          <h2>Todos</h2>\n        </Row>\n        <Row className=\"ml-2 mr-2 mt-2 mb-2\">\n          <AddTodo addTodoItem={this.addTodoItem}></AddTodo>\n        </Row>\n        {displayTodos.map((todo) => {\n          return (\n            <Todo\n              key={todo.id}\n              className=\"ml-2 mr-2 mt-1\"\n              todo={todo}\n              handleComplete={this.handleComplete}\n              deleteTodoItem={this.deleteTodoItem}\n            />\n          );\n        })}\n        {todos.length > 0 && (\n          <FilterTodo\n            todos={displayTodos}\n            resetTodos={this.resetTodos}\n            resetTodoComplete={this.resetTodoComplete}\n            displayActive={this.displayActive}\n            displayComplete={this.displayComplete}\n            displayTodos={this.displayTodos}\n          />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default TodoApp;\n","import TodoApp from './TodoApp';\nexport default TodoApp;\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport TodoApp from './components/TodoApp';\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}